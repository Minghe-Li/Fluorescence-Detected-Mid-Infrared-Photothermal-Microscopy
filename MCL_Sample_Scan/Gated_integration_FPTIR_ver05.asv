%This software is designed for F-PTIR imaging. The code averages the
%collected fluorescence intensity over mid-IR modulation periods and maps
%the modulation depth on each pixel to reconstruct the modulation image.

% The code is designed to work with 2 input channels (fluorescence
% intensity collected from a PMT as chanA and mid-IR laser reference
% collected as chanB) in sample scan mode (see lab notebook for details).

%Based on the old AcqToDisk sample scan code by Simpson Lab for Nonlinear
%Optics. Modified by Aleksandr Razumtcev 07/12/2021.

clear; fclose all;
addpath('C:\DIRAC\Matlab Include');
AlazarDefs
Savefile = 0; %Change to 1 to automatically save all images and rawdata
IRChannelNumber = 97; %Indicate the used QCL channel for the file name. (Only needed when Savefile = 1)

%% Specify image acquisition parameters

%Number of pixels on each axis. 100x100 by default to increase spectral
%accuracy. Use 200x200 for faster high-resolution imaging if SNR permits
Image_H_Pixel = 100;
Image_V_Pixel = 100; 

Image_H_frequency = 1/3; %Frequency of the fast-axis trigger in Hz. 1/3 by default, change based on pixel dwell time and total imaging time.  
Image_V_frequency = Image_H_frequency/Image_V_Pixel; %Calculates automatically in Hz. Make sure that it equals to slow-axis trigger frequency.
offset = 480; %Might drift. Usually 600 for 4V/5V FOV and 480 for 8V/10V FOV. 

%% Specify QCL modulation settings

MidIR_freq = 1; %QCL modulation frequency in kHz (the slowest one when using 2 function generators)
MidIR_period = 1/(MidIR_freq*1000); %In seconds

%% AlazarCard Acquision Parameters

%Decrease if "buffer overflow" error occurs
Sampling_Rate = 0; %0 for 20KSPS 1 for 1MSPS; 2 for 10MSPS; 3 for 25 MSPS; 4 for 50 MSPS; 5 for 100 MSPS;

% Channel Input Ranges.  
% 0 for +- 200mV        2 for +- 1V - DOESNT WORK 
% 1 for +- 400mV        3 for +- 2V
% 4 for +- 4V           5 for +- 800mv
ChannelARange = 4; %Usually 4 (largest input range)
ChannelBRange = 4; %Almost always 4 for Lock-In detection.
ChannalAImpedances = 0; %0 for 50 ohms. 1 for 1 Mohms. Always 0.
ChannalBImpedances = 0; %0 for 50 ohms. 1 for 1 Mohms. Always 0.
External_Trigger = 1; %If 1, acquision will only be successful if the stage finishes its movement. Use 0 when want to disable the stage.
AcqParameters.Timeline = 360; %In seconds. Should be larger than image acquisition time. Use 360 for 300s acquisition.
TriggerLevel = 20; % In percent of the input range of channel A.

% Switch for sampling rate. Only change if you know what you are doing.
switch Sampling_Rate
    case 0
        ConfigParameters.SamplingRate = SAMPLE_RATE_20KSPS;
        ConfigParameters.GlobalSamplingRate = 20e3;
    case 1
        ConfigParameters.SamplingRate = SAMPLE_RATE_1MSPS;
        ConfigParameters.GlobalSamplingRate = 1e6;
    case 2
        ConfigParameters.SamplingRate = SAMPLE_RATE_10MSPS;
        ConfigParameters.GlobalSamplingRate = 10e6;
    case 3
        ConfigParameters.SamplingRate = SAMPLE_RATE_25MSPS;
        ConfigParameters.GlobalSamplingRate = 25e6;
    case 4
        ConfigParameters.SamplingRate = SAMPLE_RATE_50MSPS;
        ConfigParameters.GlobalSamplingRate = 50e6;
    case 5
        ConfigParameters.SamplingRate = SAMPLE_RATE_100MSPS;
        ConfigParameters.GlobalSamplingRate = 1e8;
    otherwise
        disp('Error! Unsupported sampling rate! Please try number 1-5');
        return;
end

% If the card support SetBWLimit. You have to call this function.
CardSupportBW = 1;

%The number of pre and post trigger samples. The latter should be
%calculated automatically and determines when the acquisition will stop.
%You nay change it to a certain value if External_Trigger=0.
PreTriggerSamples = 0; %Usually 0.
PostTriggerSamples = 1/Image_V_frequency*ConfigParameters.GlobalSamplingRate; %How many datapoints will be collected (time*sampling rate).

%Advance number of trigger events settings.
%In order to make the alazar card happy, you need to make sure you have enough
%samplings in one buffer. A reference point for the total number of
%samplings in a buffer is 2048*100 = 204800. 
RecordsPerBuffer = 1; % not sure what this means
BuffersPerAcquisition = 1;

%Number of trigger events you want to capture.Auto Settings do not work
%with this stage.
NumberofTriggerEvents = 1;

%End of user editable part.

%% Do not edit this section, skip straight to Image reconstruction section

% Add path to AlazarTech mfiles
addpath('C:\DIRAC\Matlab Include')

% Call mfile with library definitions
AlazarDefs

%Filepath
FilePath = 'D:\Data\Photothermal_Shared_lab\4-21-21 zscan grounded SG\';
AcqParameters.FilePath = FilePath;

%Swich for input range for Channel A
switch ChannelARange
    case 0
        ConfigParameters.ChanARange = 6;
        TriggerLevelInRealWorld = 200;
        AcqParameters.RangeAinRealWorld = 200;
    case 1
        ConfigParameters.ChanARange = 7;
        TriggerLevelInRealWorld = 400;
        AcqParameters.RangeAinRealWorld = 400;
    case 2
        ConfigParameters.ChanARange = 10;
        TriggerLevelInRealWorld = 1;
        AcqParameters.RangeAinRealWorld = 1000;
    case 3
        ConfigParameters.ChanARange = 11;
        TriggerLevelInRealWorld = 2;
        AcqParameters.RangeAinRealWorld = 2000;
    case 4
        ConfigParameters.ChanARange = 12;
        TriggerLevelInRealWorld = 4;
        AcqParameters.RangeAinRealWorld = 4000;
    case 5
        ConfigParameters.ChanARange = 12;
        TriggerLevelInRealWorld = 800;
        AcqParameters.RangeAinRealWorld = 800;
    otherwise
        disp('Error! Unsupported input range! Please try number 0-4');
        return;
end

%Swich for input range for Channel B
switch ChannelBRange
    case 0
        ConfigParameters.ChanBRange = 6;
        AcqParameters.RangeBinRealWorld = 200;
    case 1
        ConfigParameters.ChanBRange = 7;
        AcqParameters.RangeBinRealWorld = 400;
    case 2
        ConfigParameters.ChanBRange = 10;
        AcqParameters.RangeBinRealWorld = 1000;
    case 3
        ConfigParameters.ChanBRange = 11;
        AcqParameters.RangeBinRealWorld = 2000;
    case 4
        ConfigParameters.ChanBRange = 12;
        AcqParameters.RangeBinRealWorld = 4000;
    otherwise
        disp('Error! Unsupported input range! Please try number 0-4');
        return;
end

%Set up the impedances.
ConfigParameters.ChanAImp = -ChannalAImpedances + 2;
ConfigParameters.ChanBImp = -ChannalBImpedances + 2;

%Set up the trigger level.
ConfigParameters.TriggerLevel = floor(TriggerLevel/100*128+128);
if TriggerLevelInRealWorld > 25
    fprintf('Current trigger level is %d mV\n', TriggerLevelInRealWorld*TriggerLevel/100);
else
    fprintf('Current trigger level is %d V\n', TriggerLevelInRealWorld*TriggerLevel/100);
end

%Set External Trigger.
ConfigParameters.External_Trigger = External_Trigger;

%See if the card support set BW limit function.
ConfigParameters.CardSupportBW = CardSupportBW;

%Set up the number of samples to capture per trigger.
AcqParameters.PreTriggerSamples = PreTriggerSamples;
AcqParameters.PostTriggerSamples = PostTriggerSamples;

%Number of total trigger events.
AcqParameters.NumberofHundredsTriggersEventtoCapture = NumberofTriggerEvents;

%Big IF for auto/advanced record settings
AcqParameters.RecordsPerBuffer = RecordsPerBuffer;
AcqParameters.BuffersPerAcquisition = BuffersPerAcquisition;

% Load driver library
if ~alazarLoadLibrary()
    fprintf('Error: ATSApi library not loaded\n');
    return
end

% TODO: Select a board
systemId = int32(1);
boardId = int32(1);

% Get a handle to the board
boardHandle = AlazarGetBoardBySystemID(systemId, boardId);
setdatatype(boardHandle, 'voidPtr', 1, 1);
if boardHandle.Value == 0
    fprintf('Error: Unable to open board system ID %u board ID %u\n', systemId, boardId);
    return
end

% Configure the board's sample rate, input, and trigger settings
if ~configureBoard(boardHandle,ConfigParameters)
    fprintf('Error: Board configuration failed\n');
    return
end

%% Image reconstruction section

%Here, the acqusition starts and it will finish once the required number of
%datapoints is collected.
try
    [result,rawdata]=acquireData(boardHandle,AcqParameters);
catch
        fprintf('Error: Acquisition failed\n');            
        return
end
if ~result
        fprintf('Error: Acquisition failed\n');
        return
end

%Rawdata is the whole rawdata collected from 2 channels, here it is divided
%into rawdata1 (channel A/fluorescence intensity) and rawdata2 (channel B/QCL reference)

rawdata1 = rawdata(1:length(rawdata)/2); %Generate fluorescence rawdata
rawdata2 = rawdata((length(rawdata)/2+1):length(rawdata)); %Generate QCl ref rawdata

%Next, we need to divide the rawdata into pixels
samplesperline = (1/Image_H_frequency)*ConfigParameters.GlobalSamplingRate; %Number of datapoints per 1 line
samplesperpixel = samplesperline/(Image_V_Pixel*2);
number_of_pixels = Image_V_Pixel*Image_H_Pixel;

%Adjust the starting point with the offset
data1 = rawdata1(offset+1:offset+(1/Image_V_frequency)*ConfigParameters.GlobalSamplingRate);

%Create and populate an array in which each line has all the datapoints
%belonging to one pixel

lines = zeros(Image_H_Pixel,samplesperline);

for i = 1:Image_H_Pixel
    lines(i,:) = data1(1+(i-1)*samplesperline:i*samplesperline);
end
lines1 = zeros(Image_H_Pixel,samplesperline/2);
% lines2 = zeros(Image_H_Pixel,samplesperline/2);
for i = 1:Image_H_Pixel
    lines1(i,:) = lines(i,1:length(lines)/2);
%     lines2(i,:) = lines(i,length(lines)/2+1:length(lines));
end
% lines2_flip = flip(lines2,2);
% lines_corrected = (lines1+lines2_flip)/2;
% lines_corrected = lines_corrected';
lines1 = lines1';
data_corrected = reshape(lines1,[1,numel(lines1)]); %substitute with lines_corrected if needed

pixels = zeros(number_of_pixels,samplesperpixel);

for i = 1:number_of_pixels;
    pixels(i,:) = data_corrected(1+(i-1)*samplesperpixel:i*samplesperpixel);
end

%Next, this loop averages as many IR modulation cycles you have during a
%single pixel dwell time for each pixel

samplesperIRperiod = MidIR_period*ConfigParameters.GlobalSamplingRate;
pixels_avg = zeros(number_of_pixels,samplesperIRperiod);

for i=1:number_of_pixels
   for j = 1:samplesperIRperiod
       pixel_temp = 0;
       for k = 1:(samplesperpixel/samplesperIRperiod - 1)
           pixel_temp2 = pixels(i,j+(k-1)*samplesperIRperiod);
           pixel_temp = pixel_temp + pixel_temp2;
       end
       pixels_avg(i,j) = pixel_temp/(samplesperpixel/samplesperIRperiod);
   end
end

pixels_mod = max(pixels_avg,[],2) - min(pixels_avg,[],2);

Image_modulation = reshape(pixels_mod,[100,100]);
Image_modulation = Image_modulation';
figure;
imagesc(Image_modulation);
colormap(jet);
if Savefile
    saveas(gcf,['D:\Data\Photothermal_Shared_lab\6-25-21 Trp full spectrum 2\Chan' num2str(IRChannelNumber) '_35us_100Hz_1.08gain_10mstc.tif']);
end

figure;
imagesc(log(RawImage2));
colormap(jet);
if Savefile
    saveas(gcf,['D:\Data\Photothermal_Shared_lab\6-25-21 Trp full spectrum 2\Chan' num2str(IRChannelNumber) '_35us_100Hz_1.08gain_10mstc_log.tif']);
end


data = reshape(data,[samplesperline,Image_V_Pixel]);
index = ones(Image_H_Pixel+1,1);
for i = 1:Image_H_Pixel
    x = acos(1 - 2*i/Image_H_Pixel);
    index(i+1) = fix(x/pi*(samplesperline/2));
end 
RawImage = ones(Image_V_Pixel,Image_H_Pixel);
for i = 1:Image_V_Pixel
    line_data = (data(1:samplesperline/2,i));%+flip(i,data(samplesperline/2+1:end)))/2;
    for j = 1:Image_H_Pixel                      
        RawImage(i,j) = mean(line_data(index(j):index(j+1)));
    end
end

figure;
imagesc(RawImage);
colormap(flipud(gray)); %colormap(gray);
if Savefile
    saveas(gcf,['D:\Data\Photothermal_Shared_lab\6-25-21 Trp full spectrum 2\epi_fluor_chan' num2str(IRChannelNumber) '.tif']);
end



figure;
plot(rawdata1);
 





if Savefile
    save(['D:\Data\Photothermal_Shared_lab\6-25-21 Trp full spectrum 2\Raw_chan' num2str(IRChannelNumber) '_35us_100Hz_1.08gain_10mstc.mat'] , 'rawdata');
    save(['D:\Data\Photothermal_Shared_lab\6-25-21 Trp full spectrum 2\RawIm_chn' num2str(IRChannelNumber) '.mat'] , 'RawImage2');
    save(['D:\Data\Photothermal_Shared_lab\6-25-21 Trp full spectrum 2\RawIm_fluorescence_chn' num2str(IRChannelNumber) '.mat'] , 'RawImage');
%     FileNameA = strcat(FilePath,datestr(now,'HH-MM-SS'),'_ChanA.txt');
%     dlmwrite(FileNameA, RawImage);
%     FileNameB = strcat(FilePath,datestr(now,'HH-MM-SS'),'_ChanB.txt');
%     dlmwrite(FileNameB, RawImage2);
end
% 



